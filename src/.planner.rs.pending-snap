{"run_id":"1678642246-165419000","line":1210,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"select_cast_postfix_operator","metadata":{"source":"src/planner.rs","assertion_line":1210,"expression":"plan(\"SELECT f64_field::float FROM all_types\")"},"snapshot":"Sort: all_types.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), f64_field:Float64;N]\n  Projection: Dictionary(Int32, Utf8(\"all_types\")) AS iox::measurement, all_types.time, all_types.f64_field AS f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), f64_field:Float64;N]\n    TableScan: all_types [bool_field:Boolean;N, f64_field:Float64;N, i64_field:Int64;N, str_field:Utf8;N, tag0:Utf8;N, tag1:Utf8;N, time:Timestamp(Nanosecond, None), u64_field:UInt64;N]"},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Sort: all_types.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), f64_field:Float64;N]\n  Projection: Dictionary(Int32, Utf8(\"all_types\")) AS iox::measurement, all_types.time, all_types.f64_field AS f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), f64_field:Float64;N]\n    TableScan: all_types [bool_field:Boolean;N, f64_field:Float64;N, i64_field:Int64;N, str_field:Utf8;N, tag0:Dictionary(Int32, Utf8);N, tag1:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), u64_field:UInt64;N]"}}
{"run_id":"1678642246-165419000","line":1449,"new":{"module_name":"influxql_logical_planner__planner__test__select_raw","snapshot_name":"select_single_measurement_group_by","metadata":{"source":"src/planner.rs","assertion_line":1449,"expression":"plan(\"SELECT usage_idle FROM cpu GROUP BY cpu\")"},"snapshot":"Sort: cpu ASC NULLS LAST, cpu.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n  Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.cpu AS cpu [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n    TableScan: cpu [cpu:Utf8;N, host:Utf8;N, region:Utf8;N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]"},"old":{"module_name":"influxql_logical_planner__planner__test__select_raw","metadata":{},"snapshot":"Sort: cpu ASC NULLS LAST, cpu.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Dictionary(Int32, Utf8);N, usage_idle:Float64;N]\n  Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.cpu AS cpu, cpu.usage_idle AS usage_idle [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Dictionary(Int32, Utf8);N, usage_idle:Float64;N]\n    TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]"}}
{"run_id":"1678642246-165419000","line":1424,"new":{"module_name":"influxql_logical_planner__planner__test__select_raw","snapshot_name":"simple_arithmetic_in_projection","metadata":{"source":"src/planner.rs","assertion_line":1424,"expression":"plan(\"SELECT foo, f64_field + f64_field FROM data\")"},"snapshot":"Schema error: No field named 'f64_field'. Valid fields are 'iox::measurement'."},"old":{"module_name":"influxql_logical_planner__planner__test__select_raw","metadata":{},"snapshot":"Sort: data.time ASC NULLS LAST, foo ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Dictionary(Int32, Utf8);N, f64_field_f64_field:Float64;N]\n  Projection: Dictionary(Int32, Utf8(\"data\")) AS iox::measurement, data.time, data.foo AS foo, data.f64_field + data.f64_field AS f64_field_f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Dictionary(Int32, Utf8);N, f64_field_f64_field:Float64;N]\n    TableScan: data [TIME:Boolean;N, bar:Dictionary(Int32, Utf8);N, bool_field:Boolean;N, f64_field:Float64;N, foo:Dictionary(Int32, Utf8);N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]"}}
{"run_id":"1678642246-165419000","line":1043,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"time_range_in_where","metadata":{"source":"src/planner.rs","assertion_line":1043,"expression":"plan(\"SELECT foo, f64_field FROM data where time > now() - 10s\")"},"snapshot":"Schema error: No field named 'time'. Valid fields are 'iox::measurement'."},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Sort: data.time ASC NULLS LAST, foo ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Dictionary(Int32, Utf8);N, f64_field:Float64;N]\n  Projection: Dictionary(Int32, Utf8(\"data\")) AS iox::measurement, data.time, data.foo AS foo, data.f64_field AS f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Dictionary(Int32, Utf8);N, f64_field:Float64;N]\n    Filter: data.time > now() - IntervalMonthDayNano(\"10000000000\") [TIME:Boolean;N, bar:Dictionary(Int32, Utf8);N, bool_field:Boolean;N, f64_field:Float64;N, foo:Dictionary(Int32, Utf8);N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]\n      TableScan: data [TIME:Boolean;N, bar:Dictionary(Int32, Utf8);N, bool_field:Boolean;N, f64_field:Float64;N, foo:Dictionary(Int32, Utf8);N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]"}}
{"run_id":"1678642246-165419000","line":1378,"new":{"module_name":"influxql_logical_planner__planner__test__select_raw","snapshot_name":"single_measurement","metadata":{"source":"src/planner.rs","assertion_line":1378,"expression":"plan(\"SELECT f64_field FROM data\")"},"snapshot":"Sort: data.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), f64_field:Float64;N]\n  Projection: Dictionary(Int32, Utf8(\"data\")) AS iox::measurement, data.time, data.f64_field AS f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), f64_field:Float64;N]\n    TableScan: data [TIME:Boolean;N, bar:Utf8;N, bool_field:Boolean;N, f64_field:Float64;N, foo:Utf8;N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]"},"old":{"module_name":"influxql_logical_planner__planner__test__select_raw","metadata":{},"snapshot":"Sort: data.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), f64_field:Float64;N]\n  Projection: Dictionary(Int32, Utf8(\"data\")) AS iox::measurement, data.time, data.f64_field AS f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), f64_field:Float64;N]\n    TableScan: data [TIME:Boolean;N, bar:Dictionary(Int32, Utf8);N, bool_field:Boolean;N, f64_field:Float64;N, foo:Dictionary(Int32, Utf8);N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]"}}
{"run_id":"1678642246-165419000","line":1181,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"explain","metadata":{"source":"src/planner.rs","assertion_line":1181,"expression":"plan(\"EXPLAIN SELECT foo, f64_field FROM data\")"},"snapshot":"Explain [plan_type:Utf8, plan:Utf8]\n  Sort: data.time ASC NULLS LAST, foo ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Utf8;N, f64_field:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"data\")) AS iox::measurement, data.time, data.foo AS foo, data.f64_field AS f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Utf8;N, f64_field:Float64;N]\n      TableScan: data [TIME:Boolean;N, bar:Utf8;N, bool_field:Boolean;N, f64_field:Float64;N, foo:Utf8;N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]"},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Explain [plan_type:Utf8, plan:Utf8]\n  Sort: data.time ASC NULLS LAST, foo ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Dictionary(Int32, Utf8);N, f64_field:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"data\")) AS iox::measurement, data.time, data.foo AS foo, data.f64_field AS f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Dictionary(Int32, Utf8);N, f64_field:Float64;N]\n      TableScan: data [TIME:Boolean;N, bar:Dictionary(Int32, Utf8);N, bool_field:Boolean;N, f64_field:Float64;N, foo:Dictionary(Int32, Utf8);N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]"}}
{"run_id":"1678642246-165419000","line":1013,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"from_zero_to_many","metadata":{"source":"src/planner.rs","assertion_line":1013,"expression":"plan(\"SELECT host, cpu, device, usage_idle, bytes_used FROM cpu, disk\")"},"snapshot":"Sort: iox::measurement ASC NULLS LAST, time ASC NULLS LAST, cpu ASC NULLS LAST, device ASC NULLS LAST, host ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Utf8;N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Utf8;N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.host AS host, cpu.cpu AS cpu, CAST(NULL AS Utf8) AS device, cpu.usage_idle AS usage_idle, CAST(NULL AS Int64) AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Utf8;N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: cpu [cpu:Utf8;N, host:Utf8;N, region:Utf8;N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, disk.host AS host, CAST(NULL AS Utf8) AS cpu, disk.device AS device, CAST(NULL AS Float64) AS usage_idle, disk.bytes_used AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Utf8;N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Utf8;N, host:Utf8;N, region:Utf8;N, time:Timestamp(Nanosecond, None)]"},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu.time ASC NULLS LAST, cpu ASC NULLS LAST, device ASC NULLS LAST, host ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.host AS host, CAST(cpu.cpu AS Utf8) AS cpu, CAST(NULL AS Utf8) AS device, cpu.usage_idle AS usage_idle, CAST(NULL AS Int64) AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, disk.host AS host, CAST(NULL AS Utf8) AS cpu, CAST(disk.device AS Utf8) AS device, CAST(NULL AS Float64) AS usage_idle, disk.bytes_used AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"}}
{"run_id":"1678642246-165419000","line":1131,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"column_matching_rules","metadata":{"source":"src/planner.rs","assertion_line":1131,"expression":"plan(\"SELECT f64_field::integer FROM data\")"},"snapshot":"Schema error: No field named 'f64_field'. Valid fields are 'iox::measurement'."},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Sort: data.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), f64_field:Int64;N]\n  Projection: Dictionary(Int32, Utf8(\"data\")) AS iox::measurement, data.time, CAST(data.f64_field AS Int64) AS f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), f64_field:Int64;N]\n    TableScan: data [TIME:Boolean;N, bar:Dictionary(Int32, Utf8);N, bool_field:Boolean;N, f64_field:Float64;N, foo:Dictionary(Int32, Utf8);N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]"}}
{"run_id":"1678642246-165419000","line":1487,"new":{"module_name":"influxql_logical_planner__planner__test__select_raw","snapshot_name":"select_multiple_measurements_group_by","metadata":{"source":"src/planner.rs","assertion_line":1487,"expression":"plan(\"SELECT usage_idle, free FROM cpu, disk GROUP BY cpu\")"},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu ASC NULLS LAST, time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.cpu AS cpu [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n      TableScan: cpu [cpu:Utf8;N, host:Utf8;N, region:Utf8;N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, CAST(NULL AS Utf8) AS cpu [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Utf8;N, host:Utf8;N, region:Utf8;N, time:Timestamp(Nanosecond, None)]"},"old":{"module_name":"influxql_logical_planner__planner__test__select_raw","metadata":{},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu ASC NULLS LAST, cpu.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, CAST(cpu.cpu AS Utf8) AS cpu, cpu.usage_idle AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, CAST(NULL AS Utf8) AS cpu, CAST(NULL AS Float64) AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"}}
{"run_id":"1678642630-141540000","line":1540,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1210,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1181,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1366,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1541,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1187,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1378,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1542,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1193,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1383,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":994,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1199,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1388,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":995,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":996,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1394,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":997,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":998,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1399,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":999,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1000,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1001,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1404,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1002,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1409,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1414,"new":null,"old":null}
{"run_id":"1678642630-141540000","line":1043,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"time_range_in_where","metadata":{"source":"src/planner.rs","assertion_line":1043,"expression":"plan(\"SELECT foo, f64_field FROM data where time > now() - 10s\")"},"snapshot":"Schema error: No field named 'time'. Valid fields are 'iox::measurement'."},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Sort: data.time ASC NULLS LAST, foo ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Dictionary(Int32, Utf8);N, f64_field:Float64;N]\n  Projection: Dictionary(Int32, Utf8(\"data\")) AS iox::measurement, data.time, data.foo AS foo, data.f64_field AS f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Dictionary(Int32, Utf8);N, f64_field:Float64;N]\n    Filter: data.time > now() - IntervalMonthDayNano(\"10000000000\") [TIME:Boolean;N, bar:Dictionary(Int32, Utf8);N, bool_field:Boolean;N, f64_field:Float64;N, foo:Dictionary(Int32, Utf8);N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]\n      TableScan: data [TIME:Boolean;N, bar:Dictionary(Int32, Utf8);N, bool_field:Boolean;N, f64_field:Float64;N, foo:Dictionary(Int32, Utf8);N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]"}}
{"run_id":"1678642630-141540000","line":1013,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"from_zero_to_many","metadata":{"source":"src/planner.rs","assertion_line":1013,"expression":"plan(\"SELECT host, cpu, device, usage_idle, bytes_used FROM cpu, disk\")"},"snapshot":"Sort: iox::measurement ASC NULLS LAST, time ASC NULLS LAST, cpu ASC NULLS LAST, device ASC NULLS LAST, host ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.host AS host, CAST(cpu.cpu AS Utf8) AS cpu, CAST(NULL AS Utf8) AS device, cpu.usage_idle AS usage_idle, CAST(NULL AS Int64) AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, disk.host AS host, CAST(NULL AS Utf8) AS cpu, CAST(disk.device AS Utf8) AS device, CAST(NULL AS Float64) AS usage_idle, disk.bytes_used AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu.time ASC NULLS LAST, cpu ASC NULLS LAST, device ASC NULLS LAST, host ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.host AS host, CAST(cpu.cpu AS Utf8) AS cpu, CAST(NULL AS Utf8) AS device, cpu.usage_idle AS usage_idle, CAST(NULL AS Int64) AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, disk.host AS host, CAST(NULL AS Utf8) AS cpu, CAST(disk.device AS Utf8) AS device, CAST(NULL AS Float64) AS usage_idle, disk.bytes_used AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"}}
{"run_id":"1678642630-141540000","line":1449,"new":{"module_name":"influxql_logical_planner__planner__test__select_raw","snapshot_name":"select_single_measurement_group_by","metadata":{"source":"src/planner.rs","assertion_line":1449,"expression":"plan(\"SELECT usage_idle FROM cpu GROUP BY cpu\")"},"snapshot":"Sort: cpu ASC NULLS LAST, cpu.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Dictionary(Int32, Utf8);N]\n  Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.cpu AS cpu [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Dictionary(Int32, Utf8);N]\n    TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]"},"old":{"module_name":"influxql_logical_planner__planner__test__select_raw","metadata":{},"snapshot":"Sort: cpu ASC NULLS LAST, cpu.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Dictionary(Int32, Utf8);N, usage_idle:Float64;N]\n  Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.cpu AS cpu, cpu.usage_idle AS usage_idle [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Dictionary(Int32, Utf8);N, usage_idle:Float64;N]\n    TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]"}}
{"run_id":"1678642630-141540000","line":1487,"new":{"module_name":"influxql_logical_planner__planner__test__select_raw","snapshot_name":"select_multiple_measurements_group_by","metadata":{"source":"src/planner.rs","assertion_line":1487,"expression":"plan(\"SELECT usage_idle, free FROM cpu, disk GROUP BY cpu\")"},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu ASC NULLS LAST, time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, CAST(cpu.cpu AS Utf8) AS cpu [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, CAST(NULL AS Utf8) AS cpu [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"},"old":{"module_name":"influxql_logical_planner__planner__test__select_raw","metadata":{},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu ASC NULLS LAST, cpu.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, CAST(cpu.cpu AS Utf8) AS cpu, cpu.usage_idle AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, CAST(NULL AS Utf8) AS cpu, CAST(NULL AS Float64) AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"}}
{"run_id":"1678642630-141540000","line":1215,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"select_cast_postfix_operator-2","metadata":{"source":"src/planner.rs","assertion_line":1215,"expression":"plan(\"SELECT f64_field::unsigned FROM all_types\")"},"snapshot":"Schema error: No field named 'f64_field'. Valid fields are 'iox::measurement'."},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Sort: all_types.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), f64_field:UInt64;N]\n  Projection: Dictionary(Int32, Utf8(\"all_types\")) AS iox::measurement, all_types.time, CAST(all_types.f64_field AS UInt64) AS f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), f64_field:UInt64;N]\n    TableScan: all_types [bool_field:Boolean;N, f64_field:Float64;N, i64_field:Int64;N, str_field:Utf8;N, tag0:Dictionary(Int32, Utf8);N, tag1:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), u64_field:UInt64;N]"}}
{"run_id":"1678642630-141540000","line":1131,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"column_matching_rules","metadata":{"source":"src/planner.rs","assertion_line":1131,"expression":"plan(\"SELECT f64_field::integer FROM data\")"},"snapshot":"Schema error: No field named 'f64_field'. Valid fields are 'iox::measurement'."},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Sort: data.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), f64_field:Int64;N]\n  Projection: Dictionary(Int32, Utf8(\"data\")) AS iox::measurement, data.time, CAST(data.f64_field AS Int64) AS f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), f64_field:Int64;N]\n    TableScan: data [TIME:Boolean;N, bar:Dictionary(Int32, Utf8);N, bool_field:Boolean;N, f64_field:Float64;N, foo:Dictionary(Int32, Utf8);N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]"}}
{"run_id":"1678642630-141540000","line":1424,"new":{"module_name":"influxql_logical_planner__planner__test__select_raw","snapshot_name":"simple_arithmetic_in_projection","metadata":{"source":"src/planner.rs","assertion_line":1424,"expression":"plan(\"SELECT foo, f64_field + f64_field FROM data\")"},"snapshot":"Schema error: No field named 'f64_field'. Valid fields are 'iox::measurement'."},"old":{"module_name":"influxql_logical_planner__planner__test__select_raw","metadata":{},"snapshot":"Sort: data.time ASC NULLS LAST, foo ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Dictionary(Int32, Utf8);N, f64_field_f64_field:Float64;N]\n  Projection: Dictionary(Int32, Utf8(\"data\")) AS iox::measurement, data.time, data.foo AS foo, data.f64_field + data.f64_field AS f64_field_f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Dictionary(Int32, Utf8);N, f64_field_f64_field:Float64;N]\n    TableScan: data [TIME:Boolean;N, bar:Dictionary(Int32, Utf8);N, bool_field:Boolean;N, f64_field:Float64;N, foo:Dictionary(Int32, Utf8);N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]"}}
{"run_id":"1678642667-662965000","line":1366,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1181,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1210,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1540,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1541,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1187,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1378,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1542,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1383,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1193,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1199,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1388,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":994,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":995,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":996,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1394,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":997,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":998,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1399,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":999,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1000,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1404,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1001,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1002,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1409,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1414,"new":null,"old":null}
{"run_id":"1678642667-662965000","line":1043,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"time_range_in_where","metadata":{"source":"src/planner.rs","assertion_line":1043,"expression":"plan(\"SELECT foo, f64_field FROM data where time > now() - 10s\")"},"snapshot":"Schema error: No field named 'time'. Valid fields are 'iox::measurement'."},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Sort: data.time ASC NULLS LAST, foo ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Dictionary(Int32, Utf8);N, f64_field:Float64;N]\n  Projection: Dictionary(Int32, Utf8(\"data\")) AS iox::measurement, data.time, data.foo AS foo, data.f64_field AS f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Dictionary(Int32, Utf8);N, f64_field:Float64;N]\n    Filter: data.time > now() - IntervalMonthDayNano(\"10000000000\") [TIME:Boolean;N, bar:Dictionary(Int32, Utf8);N, bool_field:Boolean;N, f64_field:Float64;N, foo:Dictionary(Int32, Utf8);N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]\n      TableScan: data [TIME:Boolean;N, bar:Dictionary(Int32, Utf8);N, bool_field:Boolean;N, f64_field:Float64;N, foo:Dictionary(Int32, Utf8);N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]"}}
{"run_id":"1678642667-662965000","line":1449,"new":{"module_name":"influxql_logical_planner__planner__test__select_raw","snapshot_name":"select_single_measurement_group_by","metadata":{"source":"src/planner.rs","assertion_line":1449,"expression":"plan(\"SELECT usage_idle FROM cpu GROUP BY cpu\")"},"snapshot":"Sort: cpu ASC NULLS LAST, cpu.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Dictionary(Int32, Utf8);N]\n  Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.cpu AS cpu [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Dictionary(Int32, Utf8);N]\n    TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]"},"old":{"module_name":"influxql_logical_planner__planner__test__select_raw","metadata":{},"snapshot":"Sort: cpu ASC NULLS LAST, cpu.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Dictionary(Int32, Utf8);N, usage_idle:Float64;N]\n  Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.cpu AS cpu, cpu.usage_idle AS usage_idle [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Dictionary(Int32, Utf8);N, usage_idle:Float64;N]\n    TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]"}}
{"run_id":"1678642667-662965000","line":1013,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"from_zero_to_many","metadata":{"source":"src/planner.rs","assertion_line":1013,"expression":"plan(\"SELECT host, cpu, device, usage_idle, bytes_used FROM cpu, disk\")"},"snapshot":"Sort: iox::measurement ASC NULLS LAST, time ASC NULLS LAST, cpu ASC NULLS LAST, device ASC NULLS LAST, host ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.host AS host, CAST(cpu.cpu AS Utf8) AS cpu, CAST(NULL AS Utf8) AS device, cpu.usage_idle AS usage_idle, CAST(NULL AS Int64) AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, disk.host AS host, CAST(NULL AS Utf8) AS cpu, CAST(disk.device AS Utf8) AS device, CAST(NULL AS Float64) AS usage_idle, disk.bytes_used AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu.time ASC NULLS LAST, cpu ASC NULLS LAST, device ASC NULLS LAST, host ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.host AS host, CAST(cpu.cpu AS Utf8) AS cpu, CAST(NULL AS Utf8) AS device, cpu.usage_idle AS usage_idle, CAST(NULL AS Int64) AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, disk.host AS host, CAST(NULL AS Utf8) AS cpu, CAST(disk.device AS Utf8) AS device, CAST(NULL AS Float64) AS usage_idle, disk.bytes_used AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"}}
{"run_id":"1678642667-662965000","line":1215,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"select_cast_postfix_operator-2","metadata":{"source":"src/planner.rs","assertion_line":1215,"expression":"plan(\"SELECT f64_field::unsigned FROM all_types\")"},"snapshot":"Schema error: No field named 'f64_field'. Valid fields are 'iox::measurement'."},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Sort: all_types.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), f64_field:UInt64;N]\n  Projection: Dictionary(Int32, Utf8(\"all_types\")) AS iox::measurement, all_types.time, CAST(all_types.f64_field AS UInt64) AS f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), f64_field:UInt64;N]\n    TableScan: all_types [bool_field:Boolean;N, f64_field:Float64;N, i64_field:Int64;N, str_field:Utf8;N, tag0:Dictionary(Int32, Utf8);N, tag1:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), u64_field:UInt64;N]"}}
{"run_id":"1678642667-662965000","line":1487,"new":{"module_name":"influxql_logical_planner__planner__test__select_raw","snapshot_name":"select_multiple_measurements_group_by","metadata":{"source":"src/planner.rs","assertion_line":1487,"expression":"plan(\"SELECT usage_idle, free FROM cpu, disk GROUP BY cpu\")"},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu ASC NULLS LAST, time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, CAST(cpu.cpu AS Utf8) AS cpu [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, CAST(NULL AS Utf8) AS cpu [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"},"old":{"module_name":"influxql_logical_planner__planner__test__select_raw","metadata":{},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu ASC NULLS LAST, cpu.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, CAST(cpu.cpu AS Utf8) AS cpu, cpu.usage_idle AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, CAST(NULL AS Utf8) AS cpu, CAST(NULL AS Float64) AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"}}
{"run_id":"1678642667-662965000","line":1131,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"column_matching_rules","metadata":{"source":"src/planner.rs","assertion_line":1131,"expression":"plan(\"SELECT f64_field::integer FROM data\")"},"snapshot":"Schema error: No field named 'f64_field'. Valid fields are 'iox::measurement'."},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Sort: data.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), f64_field:Int64;N]\n  Projection: Dictionary(Int32, Utf8(\"data\")) AS iox::measurement, data.time, CAST(data.f64_field AS Int64) AS f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), f64_field:Int64;N]\n    TableScan: data [TIME:Boolean;N, bar:Dictionary(Int32, Utf8);N, bool_field:Boolean;N, f64_field:Float64;N, foo:Dictionary(Int32, Utf8);N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]"}}
{"run_id":"1678642667-662965000","line":1424,"new":{"module_name":"influxql_logical_planner__planner__test__select_raw","snapshot_name":"simple_arithmetic_in_projection","metadata":{"source":"src/planner.rs","assertion_line":1424,"expression":"plan(\"SELECT foo, f64_field + f64_field FROM data\")"},"snapshot":"Schema error: No field named 'f64_field'. Valid fields are 'iox::measurement'."},"old":{"module_name":"influxql_logical_planner__planner__test__select_raw","metadata":{},"snapshot":"Sort: data.time ASC NULLS LAST, foo ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Dictionary(Int32, Utf8);N, f64_field_f64_field:Float64;N]\n  Projection: Dictionary(Int32, Utf8(\"data\")) AS iox::measurement, data.time, data.foo AS foo, data.f64_field + data.f64_field AS f64_field_f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Dictionary(Int32, Utf8);N, f64_field_f64_field:Float64;N]\n    TableScan: data [TIME:Boolean;N, bar:Dictionary(Int32, Utf8);N, bool_field:Boolean;N, f64_field:Float64;N, foo:Dictionary(Int32, Utf8);N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]"}}
{"run_id":"1678643613-528787000","line":1044,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"time_range_in_where","metadata":{"source":"src/planner.rs","assertion_line":1044,"expression":"plan(\"SELECT foo, f64_field FROM data where time > now() - 10s\")"},"snapshot":"Schema error: No field named 'time'. Valid fields are 'iox::measurement'."},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Sort: data.time ASC NULLS LAST, foo ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Dictionary(Int32, Utf8);N, f64_field:Float64;N]\n  Projection: Dictionary(Int32, Utf8(\"data\")) AS iox::measurement, data.time, data.foo AS foo, data.f64_field AS f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Dictionary(Int32, Utf8);N, f64_field:Float64;N]\n    Filter: data.time > now() - IntervalMonthDayNano(\"10000000000\") [TIME:Boolean;N, bar:Dictionary(Int32, Utf8);N, bool_field:Boolean;N, f64_field:Float64;N, foo:Dictionary(Int32, Utf8);N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]\n      TableScan: data [TIME:Boolean;N, bar:Dictionary(Int32, Utf8);N, bool_field:Boolean;N, f64_field:Float64;N, foo:Dictionary(Int32, Utf8);N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]"}}
{"run_id":"1678644159-434216000","line":1044,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"time_range_in_where","metadata":{"source":"src/planner.rs","assertion_line":1044,"expression":"plan(\"SELECT foo, f64_field FROM data where time > now() - 10s\")"},"snapshot":"Schema error: No field named 'time'. Valid fields are 'iox::measurement'."},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Sort: data.time ASC NULLS LAST, foo ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Dictionary(Int32, Utf8);N, f64_field:Float64;N]\n  Projection: Dictionary(Int32, Utf8(\"data\")) AS iox::measurement, data.time, data.foo AS foo, data.f64_field AS f64_field [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), foo:Dictionary(Int32, Utf8);N, f64_field:Float64;N]\n    Filter: data.time > now() - IntervalMonthDayNano(\"10000000000\") [TIME:Boolean;N, bar:Dictionary(Int32, Utf8);N, bool_field:Boolean;N, f64_field:Float64;N, foo:Dictionary(Int32, Utf8);N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]\n      TableScan: data [TIME:Boolean;N, bar:Dictionary(Int32, Utf8);N, bool_field:Boolean;N, f64_field:Float64;N, foo:Dictionary(Int32, Utf8);N, i64_field:Int64;N, mixedCase:Float64;N, str_field:Utf8;N, time:Timestamp(Nanosecond, None), with space:Float64;N]"}}
{"run_id":"1678645184-901986000","line":1360,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1534,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1175,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1037,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1204,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1418,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1125,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1535,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1130,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1209,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1372,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1181,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1214,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1536,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1137,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1377,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1187,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1423,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":988,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1219,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1144,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":989,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1382,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1428,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1193,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":990,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1224,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1149,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":991,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1388,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1231,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":992,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1433,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1156,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":993,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1393,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1236,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1161,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":994,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1241,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1166,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1246,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":995,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":996,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1398,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1251,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1258,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1403,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1263,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1408,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1268,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1273,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1278,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1285,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1290,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1295,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1300,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1305,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1312,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1317,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1322,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1327,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1332,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1340,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1346,"new":null,"old":null}
{"run_id":"1678645184-901986000","line":1443,"new":{"module_name":"influxql_logical_planner__planner__test__select_raw","snapshot_name":"select_single_measurement_group_by","metadata":{"source":"src/planner.rs","assertion_line":1443,"expression":"plan(\"SELECT usage_idle FROM cpu GROUP BY cpu\")"},"snapshot":"Sort: cpu ASC NULLS LAST, cpu.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Dictionary(Int32, Utf8);N]\n  Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.cpu AS cpu [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Dictionary(Int32, Utf8);N]\n    TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]"},"old":{"module_name":"influxql_logical_planner__planner__test__select_raw","metadata":{},"snapshot":"Sort: cpu ASC NULLS LAST, cpu.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Dictionary(Int32, Utf8);N, usage_idle:Float64;N]\n  Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.cpu AS cpu, cpu.usage_idle AS usage_idle [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Dictionary(Int32, Utf8);N, usage_idle:Float64;N]\n    TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]"}}
{"run_id":"1678645184-901986000","line":1007,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"from_zero_to_many","metadata":{"source":"src/planner.rs","assertion_line":1007,"expression":"plan(\"SELECT host, cpu, device, usage_idle, bytes_used FROM cpu, disk\")"},"snapshot":"Sort: iox::measurement ASC NULLS LAST, time ASC NULLS LAST, cpu ASC NULLS LAST, device ASC NULLS LAST, host ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.host AS host, CAST(cpu.cpu AS Utf8) AS cpu, CAST(NULL AS Utf8) AS device, cpu.usage_idle AS usage_idle, CAST(NULL AS Int64) AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, disk.host AS host, CAST(NULL AS Utf8) AS cpu, CAST(disk.device AS Utf8) AS device, CAST(NULL AS Float64) AS usage_idle, disk.bytes_used AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu.time ASC NULLS LAST, cpu ASC NULLS LAST, device ASC NULLS LAST, host ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.host AS host, CAST(cpu.cpu AS Utf8) AS cpu, CAST(NULL AS Utf8) AS device, cpu.usage_idle AS usage_idle, CAST(NULL AS Int64) AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, disk.host AS host, CAST(NULL AS Utf8) AS cpu, CAST(disk.device AS Utf8) AS device, CAST(NULL AS Float64) AS usage_idle, disk.bytes_used AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"}}
{"run_id":"1678645184-901986000","line":1481,"new":{"module_name":"influxql_logical_planner__planner__test__select_raw","snapshot_name":"select_multiple_measurements_group_by","metadata":{"source":"src/planner.rs","assertion_line":1481,"expression":"plan(\"SELECT usage_idle, free FROM cpu, disk GROUP BY cpu\")"},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu ASC NULLS LAST, time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, CAST(cpu.cpu AS Utf8) AS cpu [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, CAST(NULL AS Utf8) AS cpu [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"},"old":{"module_name":"influxql_logical_planner__planner__test__select_raw","metadata":{},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu ASC NULLS LAST, cpu.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, CAST(cpu.cpu AS Utf8) AS cpu, cpu.usage_idle AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, CAST(NULL AS Utf8) AS cpu, CAST(NULL AS Float64) AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"}}
{"run_id":"1678645260-152449000","line":1418,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1037,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1534,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1360,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1204,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1125,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1175,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1535,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1209,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1181,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1423,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1372,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1045,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1130,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1536,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1214,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1187,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1053,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1377,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1428,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1137,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1193,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1219,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1382,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1058,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1144,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":988,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1433,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1224,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1388,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":989,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1069,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1149,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":990,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1231,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1393,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":991,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1156,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1077,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1236,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":992,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1161,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":993,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1398,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1085,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1241,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1166,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":994,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":995,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1403,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1246,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1096,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1408,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":996,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1251,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1104,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1258,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1112,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1263,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1268,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1273,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1278,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1285,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1290,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1295,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1300,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1305,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1312,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1317,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1322,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1327,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1332,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1340,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1346,"new":null,"old":null}
{"run_id":"1678645260-152449000","line":1443,"new":{"module_name":"influxql_logical_planner__planner__test__select_raw","snapshot_name":"select_single_measurement_group_by","metadata":{"source":"src/planner.rs","assertion_line":1443,"expression":"plan(\"SELECT usage_idle FROM cpu GROUP BY cpu\")"},"snapshot":"Sort: cpu ASC NULLS LAST, cpu.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Dictionary(Int32, Utf8);N]\n  Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.cpu AS cpu [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Dictionary(Int32, Utf8);N]\n    TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]"},"old":{"module_name":"influxql_logical_planner__planner__test__select_raw","metadata":{},"snapshot":"Sort: cpu ASC NULLS LAST, cpu.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Dictionary(Int32, Utf8);N, usage_idle:Float64;N]\n  Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.cpu AS cpu, cpu.usage_idle AS usage_idle [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Dictionary(Int32, Utf8);N, usage_idle:Float64;N]\n    TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]"}}
{"run_id":"1678645260-152449000","line":1007,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"from_zero_to_many","metadata":{"source":"src/planner.rs","assertion_line":1007,"expression":"plan(\"SELECT host, cpu, device, usage_idle, bytes_used FROM cpu, disk\")"},"snapshot":"Sort: iox::measurement ASC NULLS LAST, time ASC NULLS LAST, cpu ASC NULLS LAST, device ASC NULLS LAST, host ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.host AS host, CAST(cpu.cpu AS Utf8) AS cpu, CAST(NULL AS Utf8) AS device, cpu.usage_idle AS usage_idle, CAST(NULL AS Int64) AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, disk.host AS host, CAST(NULL AS Utf8) AS cpu, CAST(disk.device AS Utf8) AS device, CAST(NULL AS Float64) AS usage_idle, disk.bytes_used AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu.time ASC NULLS LAST, cpu ASC NULLS LAST, device ASC NULLS LAST, host ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.host AS host, CAST(cpu.cpu AS Utf8) AS cpu, CAST(NULL AS Utf8) AS device, cpu.usage_idle AS usage_idle, CAST(NULL AS Int64) AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, disk.host AS host, CAST(NULL AS Utf8) AS cpu, CAST(disk.device AS Utf8) AS device, CAST(NULL AS Float64) AS usage_idle, disk.bytes_used AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"}}
{"run_id":"1678645260-152449000","line":1481,"new":{"module_name":"influxql_logical_planner__planner__test__select_raw","snapshot_name":"select_multiple_measurements_group_by","metadata":{"source":"src/planner.rs","assertion_line":1481,"expression":"plan(\"SELECT usage_idle, free FROM cpu, disk GROUP BY cpu\")"},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu ASC NULLS LAST, time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, CAST(cpu.cpu AS Utf8) AS cpu [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, CAST(NULL AS Utf8) AS cpu [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"},"old":{"module_name":"influxql_logical_planner__planner__test__select_raw","metadata":{},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu ASC NULLS LAST, cpu.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, CAST(cpu.cpu AS Utf8) AS cpu, cpu.usage_idle AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, CAST(NULL AS Utf8) AS cpu, CAST(NULL AS Float64) AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"}}
{"run_id":"1678645497-423293000","line":1178,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1537,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1128,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1207,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1363,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1446,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1040,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1421,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1426,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1048,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1538,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1453,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1133,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1212,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1056,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1431,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1539,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1140,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1460,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1217,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1184,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1375,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1436,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1061,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1222,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1467,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1190,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1380,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1072,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1147,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1227,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1474,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1385,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1152,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1080,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1234,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1196,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":991,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1391,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1159,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1239,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1088,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":992,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1164,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1396,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1244,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":993,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1169,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1099,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1249,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":994,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1254,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":995,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1401,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":996,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":997,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1107,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1406,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1261,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":998,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1411,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":999,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1115,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1266,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1271,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1276,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1281,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1288,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1293,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1298,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1303,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1308,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1315,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1320,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1325,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1330,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1335,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1343,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1349,"new":null,"old":null}
{"run_id":"1678645497-423293000","line":1484,"new":{"module_name":"influxql_logical_planner__planner__test__select_raw","snapshot_name":"select_multiple_measurements_group_by","metadata":{"source":"src/planner.rs","assertion_line":1484,"expression":"plan(\"SELECT usage_idle, free FROM cpu, disk GROUP BY cpu\")"},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu ASC NULLS LAST, time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, CAST(cpu.cpu AS Utf8) AS cpu, cpu.usage_idle AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, CAST(NULL AS Utf8) AS cpu, CAST(NULL AS Float64) AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"},"old":{"module_name":"influxql_logical_planner__planner__test__select_raw","metadata":{},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu ASC NULLS LAST, cpu.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, CAST(cpu.cpu AS Utf8) AS cpu, cpu.usage_idle AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, CAST(NULL AS Utf8) AS cpu, CAST(NULL AS Float64) AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"}}
{"run_id":"1678645497-423293000","line":1010,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"from_zero_to_many","metadata":{"source":"src/planner.rs","assertion_line":1010,"expression":"plan(\"SELECT host, cpu, device, usage_idle, bytes_used FROM cpu, disk\")"},"snapshot":"Sort: iox::measurement ASC NULLS LAST, time ASC NULLS LAST, cpu ASC NULLS LAST, device ASC NULLS LAST, host ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.host AS host, CAST(cpu.cpu AS Utf8) AS cpu, CAST(NULL AS Utf8) AS device, cpu.usage_idle AS usage_idle, CAST(NULL AS Int64) AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, disk.host AS host, CAST(NULL AS Utf8) AS cpu, CAST(disk.device AS Utf8) AS device, CAST(NULL AS Float64) AS usage_idle, disk.bytes_used AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu.time ASC NULLS LAST, cpu ASC NULLS LAST, device ASC NULLS LAST, host ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.host AS host, CAST(cpu.cpu AS Utf8) AS cpu, CAST(NULL AS Utf8) AS device, cpu.usage_idle AS usage_idle, CAST(NULL AS Int64) AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, disk.host AS host, CAST(NULL AS Utf8) AS cpu, CAST(disk.device AS Utf8) AS device, CAST(NULL AS Float64) AS usage_idle, disk.bytes_used AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"}}
{"run_id":"1678646323-188337000","line":1484,"new":{"module_name":"influxql_logical_planner__planner__test__select_raw","snapshot_name":"select_multiple_measurements_group_by","metadata":{"source":"src/planner.rs","assertion_line":1484,"expression":"plan(\"SELECT usage_idle, free FROM cpu, disk GROUP BY cpu\")"},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu ASC NULLS LAST, time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, CAST(cpu.cpu AS Utf8) AS cpu, cpu.usage_idle AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, CAST(NULL AS Utf8) AS cpu, CAST(NULL AS Float64) AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"},"old":{"module_name":"influxql_logical_planner__planner__test__select_raw","metadata":{},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu ASC NULLS LAST, cpu.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, CAST(cpu.cpu AS Utf8) AS cpu, cpu.usage_idle AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, CAST(NULL AS Utf8) AS cpu, CAST(NULL AS Float64) AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"}}
{"run_id":"1678646662-425363000","line":1446,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1178,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1537,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1128,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1484,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1010,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1363,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1040,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1207,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1421,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1020,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1133,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1184,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1453,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1212,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1021,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1375,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1048,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1538,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1426,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1460,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1217,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1190,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1380,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1056,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1140,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1028,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1196,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1222,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1539,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1431,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1385,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1467,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":991,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1147,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1227,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":992,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1061,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1391,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1152,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":993,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1474,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1234,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1436,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":994,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1396,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1072,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1159,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":995,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1239,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":996,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1080,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1244,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":997,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1164,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1401,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1249,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":998,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1088,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1169,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":999,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1406,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1254,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1099,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1411,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1261,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1107,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1266,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1271,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1115,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1276,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1281,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1288,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1293,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1298,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1303,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1308,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1315,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1320,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1325,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1330,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1335,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1343,"new":null,"old":null}
{"run_id":"1678646662-425363000","line":1349,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1384,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1149,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1558,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1228,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1442,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1031,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1505,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1061,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1199,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1467,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1041,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1559,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1474,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1205,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1447,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1396,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1233,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1154,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1069,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1042,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1238,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1560,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1211,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1401,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1481,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1077,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1243,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1161,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1217,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1406,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1488,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1049,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1248,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1082,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1012,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1168,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1412,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1495,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1013,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1452,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1255,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1014,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1417,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1173,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1015,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1093,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1260,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1180,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1016,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1457,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1265,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1101,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1017,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1270,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1185,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1422,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1109,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1018,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1275,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1019,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1190,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1282,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1120,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1020,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1427,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1287,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1128,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1432,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1292,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1136,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1297,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1302,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1309,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1314,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1319,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1324,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1329,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1336,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1341,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1346,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1351,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1356,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1364,"new":null,"old":null}
{"run_id":"1678668180-249069000","line":1370,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1228,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1149,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1442,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1558,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1467,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1384,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1061,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1199,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1559,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1233,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1154,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1396,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1474,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1238,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1401,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1161,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1069,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1481,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1205,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1447,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1560,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1243,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1077,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1406,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1211,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1168,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1488,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1248,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1452,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1173,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1412,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1082,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1217,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1180,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1255,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1417,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1093,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1457,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1495,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1012,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1185,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1260,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1013,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1101,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1014,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1265,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1422,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1190,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1015,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1016,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1270,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1017,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1427,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1109,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1275,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1018,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1432,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1120,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1019,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1282,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1020,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1287,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1128,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1292,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1136,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1297,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1302,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1309,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1314,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1319,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1324,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1329,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1336,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1341,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1346,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1351,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1356,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1364,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1370,"new":null,"old":null}
{"run_id":"1678669870-166452000","line":1505,"new":{"module_name":"influxql_logical_planner__planner__test__select_raw","snapshot_name":"select_multiple_measurements_group_by","metadata":{"source":"src/planner.rs","assertion_line":1505,"expression":"plan(\"SELECT usage_idle, free FROM cpu, disk GROUP BY cpu\")"},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu ASC NULLS LAST, time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, CAST(cpu.cpu AS Utf8) AS cpu, cpu.usage_idle AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, CAST(NULL AS Utf8) AS cpu, CAST(NULL AS Float64) AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"},"old":{"module_name":"influxql_logical_planner__planner__test__select_raw","metadata":{},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu ASC NULLS LAST, cpu.time ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, CAST(cpu.cpu AS Utf8) AS cpu, cpu.usage_idle AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, CAST(NULL AS Utf8) AS cpu, CAST(NULL AS Float64) AS usage_idle, NULL AS free [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), cpu:Utf8;N, usage_idle:Float64;N, free:Null;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"}}
{"run_id":"1678669870-166452000","line":1031,"new":{"module_name":"influxql_logical_planner__planner__test__select","snapshot_name":"from_zero_to_many","metadata":{"source":"src/planner.rs","assertion_line":1031,"expression":"plan(\"SELECT host, cpu, device, usage_idle, bytes_used FROM cpu, disk\")"},"snapshot":"Sort: iox::measurement ASC NULLS LAST, time ASC NULLS LAST, cpu ASC NULLS LAST, device ASC NULLS LAST, host ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.host AS host, CAST(cpu.cpu AS Utf8) AS cpu, CAST(NULL AS Utf8) AS device, cpu.usage_idle AS usage_idle, CAST(NULL AS Int64) AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, disk.host AS host, CAST(NULL AS Utf8) AS cpu, CAST(disk.device AS Utf8) AS device, CAST(NULL AS Float64) AS usage_idle, disk.bytes_used AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"},"old":{"module_name":"influxql_logical_planner__planner__test__select","metadata":{},"snapshot":"Sort: iox::measurement ASC NULLS LAST, cpu.time ASC NULLS LAST, cpu ASC NULLS LAST, device ASC NULLS LAST, host ASC NULLS LAST [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n  Union [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n    Projection: Dictionary(Int32, Utf8(\"cpu\")) AS iox::measurement, cpu.time, cpu.host AS host, CAST(cpu.cpu AS Utf8) AS cpu, CAST(NULL AS Utf8) AS device, cpu.usage_idle AS usage_idle, CAST(NULL AS Int64) AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: cpu [cpu:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None), usage_idle:Float64;N, usage_system:Float64;N, usage_user:Float64;N]\n    Projection: Dictionary(Int32, Utf8(\"disk\")) AS iox::measurement, disk.time, disk.host AS host, CAST(NULL AS Utf8) AS cpu, CAST(disk.device AS Utf8) AS device, CAST(NULL AS Float64) AS usage_idle, disk.bytes_used AS bytes_used [iox::measurement:Dictionary(Int32, Utf8), time:Timestamp(Nanosecond, None), host:Dictionary(Int32, Utf8);N, cpu:Utf8;N, device:Utf8;N, usage_idle:Float64;N, bytes_used:Int64;N]\n      TableScan: disk [bytes_free:Int64;N, bytes_used:Int64;N, device:Dictionary(Int32, Utf8);N, host:Dictionary(Int32, Utf8);N, region:Dictionary(Int32, Utf8);N, time:Timestamp(Nanosecond, None)]"}}
